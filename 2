import { api } from "./api";

enum PaymentType  {
CASH,
  TRANSFER,
  CREDIT,
}

export type ClientType = {
  id?: number;
  name: string;
  companyCode: string;
  companyType: string;
  companyId: string;
  taxId?: string;
  accountNumber: string;
  bankAccountNumber: string;
  legalAddress: string;
  address: string;
  phoneNumber: string;
  otherPhoneNumber: string;
  email: string;
  contactPerson: string;
  updated_at?: string;
  created_at?: string;
};

export type SaleType = {
  id?: number;
  clientId: number;
  saleItems: Array<{
    productId: number;
    price: number;
    priceUnit: string;
    amount: number;
    amountUnit: string;
  }>;
  paymentType: 
  updated_at?: string;
  created_at?: string;
};

const clientApi = api.injectEndpoints({
  endpoints: (builder) => ({
    createClient: builder.mutation({
      query: (newClient: ClientType) => ({
        url: "client/create",
        method: "POST",
        body: newClient,
      }),
    }),
    deleteClient: builder.mutation({
      query: (id) => ({
        url: `client/${id}`,
        method: "DELETE",
      }),
    }),
    updateClient: builder.mutation({
      query: (newClient) => {
        const id = newClient.id;
        const updatedClient = { ...newClient };
        delete updatedClient.id;
        return {
          url: `product/${id}`,
          method: "PUT",
          body: updatedClient,
        };
      },
    }),
    getClient: builder.query<ClientType[], void>({
      query: () => ({
        url: "client",
        method: "GET",
      }),
    }),
    getClientById: builder.query<ClientType, { clientId: string | number }>({
      query: (arg: { clientId: string | number }) => ({
        url: `client/${arg.clientId}`,
        method: "GET",
      }),
    }),
    addSale: builder.mutation({
      query: (newSale: ClientType) => ({
        url: "client/create",
        method: "POST",
        body: newClient,
      }),
    }),
  }),
});

export const {
  useCreateClientMutation,
  useGetClientQuery,
  useGetClientByIdQuery,
  useLazyGetClientByIdQuery,
  useUpdateClientMutation,
  useDeleteClientMutation,
} = clientApi;
